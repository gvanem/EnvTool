#
# GNU makefile for EnvTool (PellesC 32/64-bit).
#
USE_DEBUG     ?= 1
USE_64BIT     ?= 0
USE_POCRT_DLL ?= 0

POCC_ROOT = $(realpath $(PELLESC))

#
# PellesC should work without having it's stuff in the PATH or INCLUDE etc.
#
LD = $(POCC_ROOT)/bin/polink
RC = $(POCC_ROOT)/bin/porc
CC = $(POCC_ROOT)/bin/pocc

CFLAGS = -X -W1 -DEVERYTHINGUSERAPI= -DEVERYTHINGAPI=__cdecl          \
         -D_WIN32_WINNT=0x501 -D_WIN32_IE=0x500 -DWIN32_LEAN_AND_MEAN \
         -std:C11 -Go -Zi -Zl -Ze                                     \
         -I$(POCC_ROOT)/include -I$(POCC_ROOT)/include/win

# CFLAGS += -DSTRSAFE_NO_DEPRECATE

#
# Avoid warning in <win/malloc.h>
#
CFLAGS += -D_MALLOC_H

LDFLAGS = -map -subsystem:console -debug -verbose -nodefaultlib

RCFLAGS = -D__POCC__

ifeq ($(USE_POCRT_DLL),1)
  CFLAGS += -MD
  CRT_LIB = pocrt
else
  CFLAGS += -MT
  CRT_LIB = crtmt
endif

ifeq ($(USE_DEBUG),1)
  CFLAGS += -D_DEBUG
else
  CFLAGS += -Ox
endif

ifeq ($(USE_64BIT),1)
  CFLAGS  += -Tx64-coff
  LDFLAGS += -machine:x64
  RCFLAGS += -D_WIN64

  EX_LIBS += $(addprefix $(POCC_ROOT)/lib/, \
               $(CRT_LIB)64.lib             \
               oldnames64.lib               \
               Win64/user32.lib             \
               Win64/shell32.lib            \
               Win64/kernel32.lib           \
               Win64/advapi32.lib           \
               Win64/imagehlp.lib           \
               Win64/crypt32.lib            \
               Win64/psapi.lib              \
               Win64/shlwapi.lib            \
               Win64/ws2_32.lib             \
               Win64/wintrust.lib           \
               Win64/version.lib)
else
  CFLAGS  += -Tx86-coff
  LDFLAGS += -machine:x86
  RCFLAGS += -D_WIN32

  EX_LIBS += $(addprefix $(POCC_ROOT)/lib/, \
               $(CRT_LIB).lib               \
               oldnames.lib                 \
               Win/user32.lib               \
               Win/shell32.lib              \
               Win/kernel32.lib             \
               Win/advapi32.lib             \
               Win/imagehlp.lib             \
               Win/crypt32.lib              \
               Win/psapi.lib                \
               Win/shlwapi.lib              \
               Win/ws2_32.lib               \
               Win/wintrust.lib             \
               Win/version.lib)
endif

SOURCES = auth.c cfg_file.c color.c description.c dirlist.c envtool.c envtool_py.c \
          Everything.c Everything_ETP.c ignore.c get_file_assoc.c getopt_long.c \
          misc.c regex.c searchpath.c smartlist.c show_ver.c sort.c tests.c \
          vcpkg.c win_ver.c win_trust.c

OBJECTS = $(SOURCES:.c=.obj)

all: cflags_PellesC.h ldflags_PellesC.h envtool.exe
	cp --update envtool.exe ..
	@echo '../envtool.exe successfully built.'

envtool.exe: $(OBJECTS) envtool.res
	$(call link_EXE, $@, $^)

win_trust.exe: win_trust.c getopt_long.obj misc.obj color.obj smartlist.obj
	$(CC) -c $(CFLAGS) -DWIN_TRUST_TEST $^
	$(call link_EXE, $@, win_trust.obj getopt_long.obj misc.obj color.obj smartlist.obj)

win_glob.exe: win_glob.c misc.obj color.obj smartlist.obj
	$(CC) -c $(CFLAGS) -DWIN_GLOB_TEST $^
	$(call link_EXE, $@, win_glob.obj misc.obj color.obj smartlist.obj)

win_ver.exe: win_ver.c misc.obj color.obj smartlist.obj
	$(CC) -c $(CFLAGS) -DWIN_VER_TEST win_ver.c
	$(call link_EXE, $@, win_ver.obj misc.obj color.obj smartlist.obj)

envtool.res: envtool.rc
	$(RC) $(RCFLAGS) -Foenvtool.res envtool.rc

%.obj: %.c
	$(CC) -c $(CFLAGS) $<
	@echo

%.i: %.c Makefile.PellesC
	$(CC) -c -E $(CFLAGS) $< > $@
	@echo

clean:
	rm -f $(OBJECTS) envtool.res envtool.exe envtool.map cflags_PellesC.h ldflags_PellesC.h
	@echo

vclean: clean
	rm -f win_glob.exe win_glob.map

cflags_PellesC.h: Makefile.PellesC
	echo 'const char *cflags = "$(CC) $(CFLAGS)";' > $@
	@echo

ldflags_PellesC.h: Makefile.PellesC
	echo 'const char *ldflags = "$(LD) $(LDFLAGS) -out:envtool.exe $(OBJECTS) envtool.res $(EX_LIBS)";' > $@
	@echo

#
# arg1: $(1) = the .exe-file
# arg2: $(2) = the .obj-files
#
define link_EXE
  $(LD) $(LDFLAGS) -out:$(strip $(1)) $(2) $(EX_LIBS) > link.tmp
  cat link.tmp >> $(1:.exe=.map)
  rm -f $(1:.exe=.obj)
  @echo
endef

envtool.res:        envtool.h
envtool.obj:        envtool.c getopt_long.h Everything.h Everything_IPC.h envtool.h envtool_py.h sort.h description.h
envtool_py.obj:     envtool_py.c envtool.h envtool_py.h
Everything.obj:     Everything.c Everything.h Everything_IPC.h
Everything_ETP.obj: Everything_ETP.c envtool.h color.h
description.obj:    description.c description.h color.h smartlist.h envtool.h sort.h
get_file_assoc.obj: get_file_assoc.c envtool.h color.h get_file_assoc.h
getopt_long.obj:    getopt_long.c getopt_long.h
color.obj:          color.c color.h
misc.obj:           misc.c envtool.h color.h
searchpath.obj:     searchpath.c envtool.h
show_ver.obj:       show_ver.c envtool.h
smartlist.obj:      smartlist.c envtool.h
vcpkg.obj:          vcpkg.c envtool.h smartlist.h color.h dirlist.h vcpkg.h
win_glob.obj:       win_glob.c envtool.h win_glob.h


